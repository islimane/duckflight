/// Mixin helper to output vendor-prefixed CSS
/// @access private
/// @author HugoGiraudel
/// @param {String} $property - Unprefixed CSS property
/// @param {*} $value - Raw CSS value
/// @param {List} $prefixes [()] - List of prefixes to output

@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }

  #{$property}: $value;
}

/// Mixin helper to prefix `@keyframes`
/// @access private
/// @param {String} $name - Animation name
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }

  @-moz-keyframes #{$name} {
    @content;
  }

  @-o-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }
}
@mixin animation ($delay, $duration, $animation, $timing: ease, $iteration: 1) {
  @include prefix(animation-name, $animation,'webkit' 'moz' 'ms' 'o');
  @include prefix(animation-delay, $delay, 'webkit' 'moz' 'ms' 'o');
  @include prefix(animation-duration, $duration,'webkit' 'moz' 'ms' 'o');
  @include prefix(animation-timing-function, $timing, 'webkit' 'moz' 'ms' 'o');
  @include prefix(animation-iteration-count, $iteration, 'webkit' 'moz' 'ms' 'o');
}

@mixin gradient($start-color, $end-color, $orientation)
{
  background: $start-color;
  @if $orientation == vertical
  {
    // vertical
    background: -moz-linear-gradient(top,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-linear-gradient(top,  $start-color 0%,$end-color 100%);
    background: -o-linear-gradient(top,  $start-color 0%,$end-color 100%);
    background: -ms-linear-gradient(top,  $start-color 0%,$end-color 100%);
    background: linear-gradient(to bottom,  $start-color 0%,$end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=0 );
  }
  @else if $orientation == horizontal
  {
    // horizontal
    background: -moz-linear-gradient(left,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(linear, left top, right top, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-linear-gradient(left,  $start-color 0%,$end-color 100%);
    background: -o-linear-gradient(left,  $start-color 0%,$end-color 100%);
    background: -ms-linear-gradient(left,  $start-color 0%,$end-color 100%);
    background: linear-gradient(to right,  $start-color 0%,$end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
  }
  @else
  {
    // radial
    background: -moz-radial-gradient(center, ellipse cover,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
    background: -o-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
    background: -ms-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
    background: radial-gradient(ellipse at center,  $start-color 0%,$end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
  }
}

@mixin linearGradient($top, $bottom, $orientation){
  background: $top; /* Old browsers */
  @if $orientation == 'vertical'{
    background: -webkit-linear-gradient($start-color, $end-color);
    background: -moz-linear-gradient($start-color, $end-color);
    background: -ms-linear-gradient($start-color, $end-color);
    background: -o-linear-gradient($start-color, $end-color);
    background: linear-gradient($start-color, $end-color);
  }@else if $orientation == 'horizontal'{
    background: -webkit-linear-gradient(left,$start-color, $end-color);
    background: -moz-linear-gradient(right,$start-color, $end-color);
    background: -ms-linear-gradient(left,$start-color, $end-color);
    background: -o-linear-gradient(right,$start-color, $end-color);
    background: linear-gradient(to right,$start-color, $end-color);
  }@else if $orientation == 'diagonal'{
    background: -webkit-linear-gradient(left top, $start-color, $end-color);
    background: -moz-linear-gradient(bottom right, $start-color, $end-color);
    background: -ms-linear-gradient(left top, $start-color, $end-color);
    background: -o-linear-gradient(bottom right, $start-color, $end-color);
    background: linear-gradient(to bottom right, $start-color, $end-color);
  }@else{
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: -moz-radial-gradient(center,ellipse cover, $start-color, $end-color);
    background: -ms-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: -o-radial-gradient(center,ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }

}


@mixin border-radius($radius) {
  @include prefix(border-radius, $radius, 'webkit' 'moz' 'ms' 'o');
};

@mixin box-shadow($properties) {
  @include prefix(box-shadow, $properties, 'webkit' 'moz' 'ms' 'o');
}


/// Media query helper for declaring media queries by width, and, optionally, ratio.
/// @access public
/// @param {Length} $width - Max-width
/// @param {Number | False} $ratio [false] - Min device pixel ratio
/// @example scss - Usage
///   .foo {
///     @include mquery(350px, 2) {
///       width: 100%;
///     }
///   }
@mixin mquery($width, $ratio: false) {
  @if $ratio {
    @media
    only screen and (max-width: $width) and  (min--moz-device-pixel-ratio: $ratio),
    only screen and (max-width: $width) and  (-webkit-min-device-pixel-ratio: $ratio),
    only screen and (max-width: $width) and  (min-device-pixel-ratio: $ratio) {
      @content;
    }
  } @else {
    @media only screen and (max-width: $width) {
      @content;
    }
  }
}

@function black($opacity) {
  @return rgba(0, 0, 0, $opacity);
}

@function white($opacity) {
  @return rgba(255, 255, 255, $opacity);
}


/// Given an opacity value, generates that value as well as a way to display that opacity value in Internet Explorer 8 and 9.
/// @access public
/// @param {Float} $opacity - Opacity
/// @example scss - Usage
///   .foo {
///     @include opacity(0.5);
///   }
/// @example css - Result
///   .foo {
///     opacity: 0.5;
///     filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#50)";
///   }
@mixin opacity($opacity) {
  opacity: $opacity;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity * 100})";
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin position($type, $top: null, $right: null, $bottom: null, $left: null) {
  position: $type;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin transform($transformation){
  @include prefix(transform, $transformation, 'webkit' 'ms' 'moz' 'o');
}

@mixin transition($property: all, $time: 1s, $timing-function: ease-in-out, $delay: 0s) {
  @include prefix(transition, $property $time $timing-function $delay, 'webkit' 'ms' 'moz' 'o');
}

@mixin flexbox
{
  display:-webkit-box; // old
  display:-webkit-flex; // new
  display:-webkit-flexbox;
  display:-moz-box; // old
  display:-moz-flex;
  display:-ms-flexbox; // ie
  display:flex; // new
}

@mixin inline-flexbox{
  display:-moz-inline-box; // old
  display:-ms-inline-flexbox; // ie
  display:-webkit-inline-flex; // new
  display:inline-flex; // new
}

@mixin flex($values) {
  -webkit-box-flex: $values;      /* OLD - iOS 6-, Safari 3.1-6 */
  -moz-box-flex: $values;         /* OLD - Firefox 19- */
  -webkit-flex: $values;          /* Chrome */
  -ms-flex: $values;              /* IE 10 */
  flex: $values;
}

@mixin flex-direction($direction: row) {
  @include prefix(flex-direction, $direction, 'webkit' 'moz' 'ms');
}
@mixin flex-flow($flow){
  @include prefix(flex-flow,$flow,'webkit' 'moz' 'ms');
}
@mixin flex-grow($grow){
  @include prefix(flex-grow,$grow, 'webkit' 'moz' 'ms');
}
@mixin flex-wrap($wrap){
  @include prefix(flex-wrap, $wrap, 'webkit' 'moz' 'ms');
}

@mixin justify-content($align: flex-start){
  @include prefix(justify-content, $align, 'webkit' 'moz' 'ms');
}

@mixin align-content($align: stretch) {
  @include prefix(align-content,$align,'webkit' 'moz' 'ms');
}

@mixin align-items($align: stretch){
  @include prefix(align-items,$align, 'webkit' 'moz' 'ms');
}

@mixin filter($filter-type,$filter-amount) {
  -webkit-filter: $filter-type+unquote('(#{$filter-amount})');
  -moz-filter: $filter-type+unquote('(#{$filter-amount})');
  -ms-filter: $filter-type+unquote('(#{$filter-amount})');
  -o-filter: $filter-type+unquote('(#{$filter-amount})');
  filter: $filter-type+unquote('(#{$filter-amount})');
}

@mixin runnable-track($background: rgba(193, 0, 0, 0.25),
                      $radius: 3.2px,
                      $border: 0px solid rgba(0, 1, 1, 0),
                      $shadow: 1px 1px 1px rgba(0, 0, 0, 0),
                      $width:100%,
                      $height:5.8px){
  &::-webkit-slider-runnable-track{
    @include size($width,$height);
    @include box-shadow($shadow);
    @include border-radius($radius);
    background: $background;
    cursor: pointer;
    border: $border;
  }
  &::-moz-range-track {
    @include size($width,$height);
    @include box-shadow($shadow);
    @include border-radius($radius);
    background: $background;
    cursor: pointer;
    border: $border;
  }
  &::-ms-track {
    @include size($width,$height);
    cursor: pointer;
    background: transparent;
    border-color: transparent;
    color: transparent;
  }
  &::-ms-fill-lower, &::-ms-fill-upper {
    background: rgba(193, 0, 0, 0.25);
    border: 0px solid rgba(0, 1, 1, 0);
    @include border-radius($radius * 2);
    @include box-shadow($shadow);
  }
}

@mixin thumb($background:rgba(255, 109, 111, 0.98),
             $radius: 19px,
             $border:0px solid rgba(218, 0, 0, 0.19),
             $width: 11px,
             $height: $width,
             $shadow: 0px 0px 0px #000000){
  &::-webkit-slider-thumb {
    @include box-shadow(0px 0px 0px #000000);
    @include size($width,$height);
    @include border-radius(19px);
    background: $background;
    cursor: pointer;
    border: 0px solid rgba(218, 0, 0, 0.19);
    -webkit-appearance: none;
    margin-top: -2.6px;
  }
  &::-moz-range-thumb {
    @include box-shadow(0px 0px 0px #000000);
    @include size($width,$height);
    @include border-radius(19px);
    background: $background;
    cursor: pointer;
    border: 0px solid rgba(218, 0, 0, 0.19);
  }
  &::-ms-thumb {
    @include box-shadow(0px 0px 0px #000000);
    @include size($width,$height);
    @include border-radius(19px);
    background: $background;
    cursor: pointer;
    border: 0px solid rgba(218, 0, 0, 0.19);
  }
}


